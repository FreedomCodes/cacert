
We will provide some more sample code and specific information here shortly. Until then, please look into loading your own KeyStore instance and implementing a custom TrustMnaagerFactory.


Some useful threads:

http://groups.google.com/group/android-developers/browse_thread/thread/366a3c8a6b2a7ad/163ff07c8ac39929?lnk=gst&q=SSL+root

        TrustManagerFactory mTrustManagerFactory = new 
TrustManagerFactory(mTrustManagerFactorySpi, null, malg); 
        KeyStore ks = null; 
                try { 
                        mTrustManagerFactory.init(ks); 
                } catch (KeyStoreException e) { 
                        // TODO Auto-generated catch block 
                        e.printStackTrace(); 
                } 


http://groups.google.com/group/android-developers/browse_thread/thread/df5852b81f3ad7f9?pli=1

Here is a way to configure to the SSLContext 
        TrustManager[] trustAllCerts = new TrustManager[] { new 
X509TrustManager() 
        { 
            public java.security.cert.X509Certificate[] 
getAcceptedIssuers() 
            { 
                return acceptedIssuers; 
            } 
            public void 
checkClientTrusted( java.security.cert.X509Certificate[] certs, String 
authType ) 
            { 
            } 
            public void 
checkServerTrusted( java.security.cert.X509Certificate[] certs, String 
authType ) 
            { 
            } 
        } }; 
        // Install the all-trusting trust manager 
        try 
        { 
            sc = SSLContext.getInstance( "TLS" ); 
            sc.init( null, trustAllCerts, new 
java.security.SecureRandom() ); 
HttpsURLConnection.setDefaultSSLSocketFactory( sc.getSocketFactory() ); 
        } 
        catch( Exception e ) 
        { 
            e.printStackTrace(); 
        } 
